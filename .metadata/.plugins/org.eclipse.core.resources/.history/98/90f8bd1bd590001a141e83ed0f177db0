package com.webflux.app.handler;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.BodyInserters;
import org.springframework.web.reactive.function.server.ServerRequest;
import org.springframework.web.reactive.function.server.ServerResponse;

import com.webflux.app.models.documents.Producto;
import com.webflux.app.models.services.IProductoService;

import reactor.core.publisher.Mono;

@Component //Es el controlador, pero no antonar con @Conteller
public class ProductoHandler {

	@Autowired
	private IProductoService iProductoService;	
	
	public Mono<ServerResponse> listar(ServerRequest request) {
		return ServerResponse.ok()
				.contentType(MediaType.APPLICATION_JSON_UTF8)
				.body(iProductoService.findAll(),Producto.class);
	}
	
	
	public Mono<ServerResponse> ver (ServerRequest request){
		String id=request.pathVariable("id");
		
		return iProductoService.findById(id) //
				.flatMap(p->ServerResponse //Conver el serverResonse a un Mono<ServerResponse>
						.ok() //200
						.contentType(MediaType.APPLICATION_JSON_UTF8) //opcional
						.body(BodyInserters.fromObject(p)))//Recibe un publishe del tipo mono o flux. P como no es un tipo reactivo  usamos inserters
				.switchIfEmpty(ServerResponse.notFound().build());	//build retorna un Mono<ServerResponse>										
	}

}
